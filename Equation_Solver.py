from functions import Process_image, Calculate
import numpy as np
import streamlit as st
import keras
from keras.models import load_model


# dictionary for class labels
map_dict = {0: '-',
 1: '+',
 2: 'div',
 3: 'X',
 4: 'times',
 5: '0',
 6: '1',
 7: '2',
 8: '3',
 9: '4',
 10: '5',
 11: '6',
 12: '7',
 13: '8',
 14: '9'}



st.title("Handwritten Equation Solver")
st.markdown("by: Jeremiah Chinyelugo")

st.write(" ")
st.write(" ")

#"=============================================================================="

# Introduction
st.write("""
         This is a simple app that can solve a basic mathematical equation.
         Users can submit an image of the equation either by uploading it. 
         The submitted image undergoes image processing and is then fed in real-time to a Convolutional Neural Network for analysis. 
         The final solution is calculated through predictions generated by the model and processed through a custom function""")

st.write(" ")
st.write(" ")

#"=============================================================================="

# Visualizing the sample Images data was trained on
with st.expander("Important Information"):
    st.write("""
             1. Please note that this model is capable of solving basic mathematical equations with no more than two operators.
             2. The model has been trained on a specific dataset of digits and mathematical operators. For optimal results, please follow these guidelines:\n
                 a. Create the equation using Microsoft Word.
                 b. Use the font 'Segoe Print' with a sufficient font size to ensure the equation appears on one line.
                 c. Capture a screenshot of the equation and upload it to the app.
             """)
    st.write('\n\n')         
    if st.checkbox('Click here to see sample images'):
        col1_a,col2_a = st.columns(2)
        col1_b,col2_b = st.columns(2)
        col1_c,col2_c = st.columns(2)
        col1_d,col2_d = st.columns(2)
        col1_e,col2_e = st.columns(2)
        
        
        # first row
        col1_a.image("./test_images/test_1.jpg", caption="i",
                  use_column_width=True, clamp=True)
        col2_a.image("./test_images/test_2.jpg", caption="ii",
                  use_column_width=True, clamp=True)

        # second row
        col1_b.image("./test_images/test_3.jpg", caption="iii",
                  use_column_width=True, clamp=True)
        col2_b.image("./test_images/test_4.jpg", caption="iv",
                  use_column_width=True, clamp=True)
        
        # third row
        col1_c.image("./test_images/test_5.jpg", caption="v",
                  use_column_width=True, clamp=True)
        col2_c.image("./test_images/test_6.jpg", caption="vi",
                  use_column_width=True, clamp=True)
        
        # fourth row
        col1_d.image("./test_images/test_7.jpg", caption="vii",
                  use_column_width=True, clamp=True)
        col2_d.image("./test_images/test_8.jpg", caption="viii",
                  use_column_width=True, clamp=True)
        
        # fifth row
        col1_e.image("./test_images/test_9.jpg", caption="ix",
                  use_column_width=True, clamp=True)
        col2_e.image("./test_images/test_10.jpg", caption="x",
                  use_column_width=True, clamp=True)

#"=============================================================================="
    
st.write(" ")
st.write(" ")    

# loading keras model
model = load_model("Equation_Solver_Model_3.h5")  


#"=============================================================================="

# processing the image and solving the equation


file = st.file_uploader("Upload your equation (Please ensure you followed the instructions above)", ['jpg','png', 'jfif'], accept_multiple_files=False)

if file:
    st.image(file, caption="Image you uploaded")
    # a. processing the image
    
    segmented_images = Process_image(file)
    if np.sum(segmented_images) < 100:
        st.write("Please check your image and following the instructions")
    else:
        # b. model prediction
        pred = np.argmax(model.predict(segmented_images), axis=1)
        
        # c. performing the calculation
        equation_list = []
        for array in pred:
            equation_list.append(map_dict[array])
        try:
            answer, equation = Calculate(equation_list)
            if answer == None:
                st.write("Please check your image and following the instructions")
            else:
                st.write(f"Handwritten Equation Solution: {equation}  =  {answer}")
        except Exception as e:
            st.write("Please check your image and following the instruction")
                    

                    
    
